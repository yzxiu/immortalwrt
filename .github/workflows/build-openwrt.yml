name: Build OpenWrt (ImmortalWrt)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Target make target, e.g., world or V=s"
        required: false
        default: "world"
      defconfig:
        description: "Run defconfig before build (yes/no)"
        required: false
        default: "yes"
  push:
    branches:
      - openwrt-23.05
  pull_request:
    branches:
      - openwrt-23.05

permissions:
  contents: read

env:
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  DL_DIR: ${{ github.workspace }}/dl
  BUILD_ROOT: ${{ github.workspace }}

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup apt dependencies (per OpenWrt Wiki)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential make coreutils clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget time

      - name: Prepare directories
        run: |
          mkdir -p "$CCACHE_DIR" "$DL_DIR"

      - name: Cache dl
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ runner.os }}-${{ hashFiles('feeds.conf*', 'feeds.conf.default', 'scripts/download.pl') }}
          restore-keys: |
            dl-${{ runner.os }}-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.ref_name }}-
            ccache-${{ runner.os }}-

      - name: Enable ccache
        run: |
          which ccache || sudo apt-get install -y ccache
          echo "CONFIG_CCACHE=y" >> .config.ccache
          ./scripts/feeds update -a || true
          ./scripts/feeds install -a || true

      - name: Show tool versions
        run: |
          gcc --version || true
          clang --version || true
          make -v || true
          python3 -V || true

      - name: Update & install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure
        env:
          TERM: xterm
        run: |
          # 统一在非交互环境下生成有效配置，避免触发 menuconfig
          if [ -f .config ]; then
            cp .config .config.bak
          fi
          # 确保启用 ccache
          echo "CONFIG_CCACHE=y" >> .config
          # 生成完整配置（非交互）
          make defconfig

      - name: Download sources (dl)
        env:
          FORCE_UNSAFE_CONFIGURE: 1
          TERM: xterm
        run: |
          # 参考 OpenWrt 文档，预下载可加速
          make download -j$(nproc) V=s

      - name: Build
        env:
          FORCE_UNSAFE_CONFIGURE: 1
          PATH: /usr/lib/ccache:$PATH
          TERM: xterm
        run: |
          set -e
          TARGET="${{ github.event.inputs.target }}"
          if [ -z "$TARGET" ]; then TARGET=world; fi
          echo "make $TARGET -j$(nproc)"
          make $TARGET -j$(nproc) V=s

      - name: Summarize space usage
        if: always()
        run: |
          du -sh bin || true
          du -sh $DL_DIR || true
          du -sh $CCACHE_DIR || true

      - name: Upload bin directory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-bin-${{ github.run_id }}
          path: |
            bin
          if-no-files-found: warn

      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-logs-${{ github.run_id }}
          path: |
            logs
            build_dir/target-*/linux-*/linux-*/.config* || true
          if-no-files-found: ignore


