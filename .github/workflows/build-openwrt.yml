name: Build OpenWrt (ImmortalWrt)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Target make target, e.g., world"
        required: false
        default: "world"
  push:
    branches:
      - openwrt-23.05
  pull_request:
    branches:
      - openwrt-23.05

permissions:
  contents: write  # 需要写权限来创建 release

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    container:
      image: q946666800/openwrt-build:v23.05_3
      options: --mount type=bind,source=/mnt,target=/mnt
    strategy:
      fail-fast: false  # 某个平台失败不影响其他平台继续编译
      matrix:
        platform:
          - name: mt3000
            config: .config.mt3000
          - name: tr3000
            config: .config.tr3000
          - name: x64
            config: .config.x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 缓存 dl 目录（下载的源码包 - 跨平台共享）
        uses: actions/cache@v4
        with:
          path: dl
          key: dl-${{ runner.os }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            dl-${{ runner.os }}-

      - name: 缓存 feeds 目录（跨平台共享）
        uses: actions/cache@v4
        with:
          path: |
            feeds
            package/feeds
          key: feeds-${{ runner.os }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            feeds-${{ runner.os }}-

      - name: 显示工具版本和磁盘空间
        run: |
          gcc --version
          make --version
          python3 --version
          echo "=== 初始磁盘空间检查 ==="
          df -h
          echo "=== 挂载空间检查 ==="
          ls -la /mnt/ || echo "挂载点不存在"
          echo "=== 清理系统临时文件 ==="
          # 清理系统临时文件
          sudo rm -rf /tmp/* 2>/dev/null || true
          sudo rm -rf /var/tmp/* 2>/dev/null || true
          # 清理可能的日志文件
          sudo find /var/log -name "*.log" -size +10M -delete 2>/dev/null || true
          echo "=== 清理后磁盘空间 ==="
          df -h

      - name: 设置编译目录到挂载空间
        run: |
          echo "=== 设置编译目录到挂载空间 ==="
          # 检查挂载点权限
          ls -la /mnt/ || echo "挂载点不存在或无权限"
          # 清空挂载空间
          sudo rm -rf /mnt/openwrt-build/* 2>/dev/null || true
          # 使用sudo创建目录并设置权限
          sudo mkdir -p /mnt/openwrt-build/build_dir
          sudo mkdir -p /mnt/openwrt-build/staging_dir
          sudo mkdir -p /mnt/openwrt-build/tmp
          sudo chown -R $(whoami):$(whoami) /mnt/openwrt-build
          sudo chmod -R 755 /mnt/openwrt-build
          echo "✓ 成功创建挂载空间目录"
          # 创建符号链接将编译目录重定向到挂载空间
          ln -sf /mnt/openwrt-build/build_dir build_dir
          ln -sf /mnt/openwrt-build/staging_dir staging_dir
          ln -sf /mnt/openwrt-build/tmp tmp
          echo "=== 挂载空间设置完成 ==="
          ls -la /mnt/openwrt-build/
          df -h /mnt/

      - name: 更新和安装 feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 配置
        run: |
          # 复制对应平台的配置文件
          cp ${{ matrix.platform.config }} .config
          # 生成完整配置
          make defconfig

      - name: 下载源码包
        run: |
          make download -j$(nproc) V=s

      # - name: 编译前深度清理
      #   run: |
      #     echo "=== 编译前深度清理 ==="
      #     # 清理可能的编译残留
      #     # rm -rf build_dir 2>/dev/null || true
      #     # rm -rf staging_dir 2>/dev/null || true
      #     # rm -rf tmp 2>/dev/null || true
      #     # 清理系统缓存
      #     sudo apt-get clean 2>/dev/null || true
      #     sudo rm -rf /var/cache/apt/archives/* 2>/dev/null || true
      #     echo "=== 清理后磁盘空间 ==="
      #     df -h

      - name: 编译
        run: |
          TARGET="${{ github.event.inputs.target }}"
          if [ -z "$TARGET" ]; then TARGET=world; fi
          echo "开始编译: make $TARGET -j$(nproc)"
          make $TARGET -j$(nproc) V=s

      - name: 检查编译产物和缓存大小
        if: always()
        run: |
          echo "=== 工作目录下所有文件夹大小 ==="
          du -sh */ 2>/dev/null | sort -hr || echo "无文件夹"
          echo ""
          echo "=== 磁盘使用情况 ==="
          df -h

      - name: 清理 build_dir 节省空间
        if: success()
        run: |
          echo "=== 清理前 build_dir 大小 ==="
          if [ -d build_dir ]; then
            du -sh build_dir 2>/dev/null || echo "无法获取 build_dir 大小"
            echo "删除 build_dir 文件夹以节省空间..."
            rm -rf build_dir
            echo "✓ build_dir 已删除"
          else
            echo "build_dir 文件夹不存在"
          fi
          echo "=== 清理后磁盘使用情况 ==="
          df -h

      # - name: 深度清理所有临时文件
      #   if: success()
      #   run: |
      #     echo "=== 深度清理开始 ==="
      #     # 清理所有可能的临时文件
      #     rm -rf build_dir 2>/dev/null || true
      #     rm -rf staging_dir 2>/dev/null || true
      #     rm -rf tmp 2>/dev/null || true
      #     rm -rf logs 2>/dev/null || true
      #     # 清理编译过程中的中间文件
      #     find . -name "*.o" -delete 2>/dev/null || true
      #     find . -name "*.a" -delete 2>/dev/null || true
      #     find . -name "*.so" -delete 2>/dev/null || true
      #     find . -name "*.tmp" -delete 2>/dev/null || true
      #     # 清理系统临时文件
      #     sudo rm -rf /tmp/* 2>/dev/null || true
      #     sudo rm -rf /var/tmp/* 2>/dev/null || true
      #     echo "=== 最终磁盘使用情况 ==="
      #     df -h

      - name: 提取固件文件
        if: success()
        run: |
          mkdir -p firmware
          case "${{ matrix.platform.name }}" in
            mt3000)
              if [ -f bin/targets/mediatek/filogic/immortalwrt-mediatek-filogic-glinet_gl-mt3000-squashfs-sysupgrade.bin ]; then
                cp bin/targets/mediatek/filogic/immortalwrt-mediatek-filogic-glinet_gl-mt3000-squashfs-sysupgrade.bin firmware/
                echo "✓ MT3000 固件已提取"
              else
                echo "✗ MT3000 固件文件不存在"
                exit 1
              fi
              ;;
            tr3000)
              if [ -f bin/targets/mediatek/filogic/immortalwrt-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin ]; then
                cp bin/targets/mediatek/filogic/immortalwrt-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin firmware/
                echo "✓ TR3000 固件已提取"
              else
                echo "✗ TR3000 固件文件不存在"
                exit 1
              fi
              ;;
            x64)
              if [ -f bin/targets/x86/64/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz ]; then
                cp bin/targets/x86/64/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz firmware/
                echo "✓ x64 固件已提取"
              else
                echo "✗ x64 固件文件不存在"
                exit 1
              fi
              ;;
          esac
          echo "=== 固件文件列表 ==="
          ls -lh firmware/

      - name: 上传固件文件（用于 release）
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.platform.name }}
          path: firmware/*
          if-no-files-found: error

      - name: 上传完整编译产物
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-bin-${{ matrix.platform.name }}-${{ github.run_id }}
          path: bin
          if-no-files-found: warn

      - name: 上传编译日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-logs-${{ matrix.platform.name }}-${{ github.run_id }}
          path: |
            logs
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 下载所有固件文件
        uses: actions/download-artifact@v4
        with:
          pattern: firmware-*
          path: ./all-firmware
          merge-multiple: false

      - name: 整理固件文件
        run: |
          mkdir -p release-files
          # 从各平台的 artifact 中复制固件到统一目录
          find ./all-firmware -type f \( -name "*.bin" -o -name "*.img.gz" \) | while read file; do
            cp "$file" release-files/
          done
          echo "=== 准备发布的固件列表 ==="
          ls -lh release-files/
          # 验证三个固件文件都存在
          [ -f release-files/immortalwrt-mediatek-filogic-glinet_gl-mt3000-squashfs-sysupgrade.bin ] || (echo "❌ MT3000 固件缺失" && exit 1)
          [ -f release-files/immortalwrt-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin ] || (echo "❌ TR3000 固件缺失" && exit 1)
          [ -f release-files/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz ] || (echo "❌ x64 固件缺失" && exit 1)
          echo "✅ 所有固件文件已就绪"

      - name: 生成 Release Tag
        id: tag
        run: |
          echo "release_tag=ImmortalWrt-$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

      - name: 创建 Release 并上传固件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: ${{ steps.tag.outputs.release_tag }}
          body: |
            ## 🎉 ImmortalWrt 自动构建固件
            
            **构建时间**: `${{ steps.tag.outputs.release_tag }}`
            **源代码分支**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
            
            ### 📦 包含的固件
            
            | 设备 | 固件文件 |
            |------|---------|
            | **GL.iNet GL-MT3000** | `immortalwrt-mediatek-filogic-glinet_gl-mt3000-squashfs-sysupgrade.bin` |
            | **Cudy TR3000 v1** | `immortalwrt-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin` |
            | **x86-64 (通用)** | `immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz` |
            
            ### 📝 使用说明
            
            - 通过 SSH 将固件上传到 `/tmp`，执行 `sysupgrade -c /tmp/<固件文件名>.bin` 进行升级并保留配置
            
            ⚠️ **注意**: 升级前请备份重要配置！
          files: |
            release-files/immortalwrt-mediatek-filogic-glinet_gl-mt3000-squashfs-sysupgrade.bin
            release-files/immortalwrt-mediatek-filogic-cudy_tr3000-v1-squashfs-sysupgrade.bin
            release-files/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz
          draft: false
          prerelease: false

