name: Build OpenWrt (ImmortalWrt)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Target make target, e.g., world"
        required: false
        default: "world"
  push:
    branches:
      - openwrt-23.05
  pull_request:
    branches:
      - openwrt-23.05

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    strategy:
      fail-fast: false  # 某个平台失败不影响其他平台继续编译
      matrix:
        platform:
          - name: mt3000
            config: .config.mt3000
          - name: tr3000
            config: .config.tr3000
          - name: x64
            config: .config.x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 缓存 dl 目录（下载的源码包 - 跨平台共享）
        uses: actions/cache@v4
        with:
          path: dl
          key: dl-${{ runner.os }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            dl-${{ runner.os }}-

      - name: 缓存 feeds 目录（跨平台共享）
        uses: actions/cache@v4
        with:
          path: |
            feeds
            package/feeds
          key: feeds-${{ runner.os }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            feeds-${{ runner.os }}-

      - name: 缓存 staging_dir（工具链和依赖库）
        uses: actions/cache@v4
        with:
          path: staging_dir
          key: staging-${{ runner.os }}-${{ matrix.platform.name }}-${{ hashFiles(matrix.platform.config, 'feeds.conf.default') }}-${{ github.sha }}
          restore-keys: |
            staging-${{ runner.os }}-${{ matrix.platform.name }}-${{ hashFiles(matrix.platform.config, 'feeds.conf.default') }}-
            staging-${{ runner.os }}-${{ matrix.platform.name }}-

      - name: 安装构建依赖（参考 OpenWrt 官方文档）
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget

      - name: 显示工具版本
        run: |
          gcc --version
          make --version
          python3 --version

      - name: 更新和安装 feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 配置
        run: |
          # 复制对应平台的配置文件
          cp ${{ matrix.platform.config }} .config
          # 生成完整配置
          make defconfig

      - name: 下载源码包
        run: |
          make download -j$(nproc) V=s

      - name: 编译
        run: |
          TARGET="${{ github.event.inputs.target }}"
          if [ -z "$TARGET" ]; then TARGET=world; fi
          echo "开始编译: make $TARGET -j$(nproc)"
          make $TARGET -j$(nproc) V=s

      - name: 检查编译产物和缓存大小
        if: always()
        run: |
          echo "=== 编译产物大小 ==="
          du -sh bin 2>/dev/null || echo "bin 目录不存在"
          echo ""
          echo "=== 缓存目录大小 ==="
          du -sh dl 2>/dev/null || echo "dl 目录为空"
          du -sh feeds 2>/dev/null || echo "feeds 目录为空"
          du -sh staging_dir 2>/dev/null || echo "staging_dir 目录为空"
          echo ""
          echo "=== 磁盘使用情况 ==="
          df -h

      - name: 上传编译产物
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-bin-${{ matrix.platform.name }}-${{ github.run_id }}
          path: bin
          if-no-files-found: warn

      - name: 上传编译日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-logs-${{ matrix.platform.name }}-${{ github.run_id }}
          path: |
            logs
          if-no-files-found: ignore

